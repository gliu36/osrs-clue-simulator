{"version":3,"sources":["components/Home.js","components/Beginner/Beginner.js","components/DoesNotExist.js","components/PageRoutes.js","components/Main.js","serviceWorker.js","index.js"],"names":["Home","style","width","margin","className","Component","Beginner","DoesNotExist","PageRoutes","exact","path","component","status","Main","fixedHeader","title","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8PAGqBA,E,iLAEb,OACI,yBAAKC,MAAO,CAACC,MAAO,OAAQC,OAAQ,SAChC,kBAAC,OAAD,CAAMC,UAAU,mB,GAJEC,aCDbC,E,iLAEb,OACI,yC,GAH0BD,aCAjBE,E,iLAEb,OACI,6D,GAH8BF,aCa3BG,EARI,kBACf,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWX,IACjC,kBAAC,IAAD,CAAOU,KAAK,YAAYC,UAAWL,IACnC,kBAAC,IAAD,CAAOK,UAAWJ,EAAcK,OAAQ,QCgBjCC,MAnBf,WACC,OACC,yBAAKT,UAAU,QACd,kBAAC,SAAD,CAAQU,aAAW,GAClB,kBAAC,SAAD,CAAQV,UAAU,SAASW,MAAM,gBAChC,kBAAC,aAAD,KACC,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,eAIH,kBAAC,UAAD,KACC,yBAAKZ,UAAU,iBACf,kBAAC,EAAD,SCTgBa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,cCTNC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAENC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.abf9ed03.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Grid, Cell } from 'react-mdl';\r\n\r\nexport default class Home extends Component {\r\n    render() {\r\n        return (\r\n            <div style={{width: '100%', margin: 'auto'}}>\r\n                <Grid className=\"home-grid\">\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Beginner extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Test\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class DoesNotExist extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                404 there nuthin here m8\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {Switch, Route } from 'react-router-dom';\r\n\r\nimport Home from './Home.js'\r\nimport Beginner from './Beginner/Beginner.js'\r\nimport DoesNotExist from './DoesNotExist.js'\r\n\r\nconst PageRoutes = () => (\r\n    <Switch>\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route path=\"/Beginner\" component={Beginner} />\r\n        <Route component={DoesNotExist} status={404}/>\r\n    </Switch>\r\n)\r\n\r\nexport default PageRoutes;","import React from 'react';\n\nimport '../styles/Main.css'\n\nimport { Layout, Header, Navigation, Content } from 'react-mdl';\nimport { Link } from 'react-router-dom';\nimport PageRoutes from './PageRoutes'\n\nfunction Main() {\n\treturn (\n\t\t<div className=\"Main\">\n\t\t\t<Layout fixedHeader>\n\t\t\t\t<Header className=\"header\" title=\"Clue Scrolls\">\n\t\t\t\t\t<Navigation>\n\t\t\t\t\t\t<Link to=\"/\">Home</Link>\n\t\t\t\t\t\t<Link to=\"/Beginner\">Beginner</Link>\n\t\t\t\t\t</Navigation>\n\t\t\t\t</Header>\n\t\t\t</Layout>\n\t\t\t<Content>\n\t\t\t\t<div className=\"page-content\" />\n\t\t\t\t<PageRoutes />\n        \t</Content>\n\t\t</div>\n\t);\n}\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './components/Main.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n        <Main />\n    </Router>\n, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}